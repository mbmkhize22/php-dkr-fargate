# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy PHP APP to Amazon ECS Fargate

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: php-dkr-fargate           # set this to your Amazon ECR repository name
  ECS_SERVICE: php-dkr-fargate-cluster-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: php-dkr-fargate-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: php-dkr-fargate-container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  BUCKET_NAME: nhlanhla-general-storage        # contains task-definition.json file
  TASK_DEF_FAMILY: php-dkr-fargate-family
  TASK_ROLE_ARN: arn:aws:iam::654654212338:role/ecsTaskExecutionRole
  TASK_EXEC_ROLE_ARN: arn:aws:iam::654654212338:role/ecsTaskExecutionRole
  SECURITYGROUP: sg-07f6c5792210ad589
  SUBNETS: '["subnet-002f0e228c8252902","subnet-0f3b7d59a70b435cf","subnet-01cfd37de02f85027","subnet-0728cadf51650b22e","subnet-0af79c5b3eb2daf46","subnet-0eb802ad3572cfda0"]'

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Check if Fargate ECS Cluster Exists
      run: |
        CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --region ${{ env.AWS_REGION }} --query 'clusters[?status==`ACTIVE`].clusterName' --output text)
        if [ -z "$CLUSTER_EXISTS" ]; then
          aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }} --region ${{ env.AWS_REGION }}
          echo "Fargate cluster (${{ env.ECS_CLUSTER }}) created."
        else
          echo "Fargate cluster already exists (${{ env.ECS_CLUSTER }}). Skipping creation."
        fi

    - name: Create Task Definition JSON
      run: |
        mkdir -p .aws
        cat <<EOT >> .aws/task-definition.json
        {
          "family": "${{ env.TASK_DEF_FAMILY }}",
          "networkMode": "awsvpc",
          "containerDefinitions": [
            {
              "name": "${{ env.CONTAINER_NAME}}",
              "image": "${{ steps.build-image.outputs.image }}",
              "cpu": 256,
              "memory": 512,
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 80,
                  "hostPort": 80,
                  "protocol": "tcp"
                }
              ]
            }
          ],
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "${{ env.TASK_EXEC_ROLE_ARN }}",
          "taskRoleArn": "${{ env.TASK_ROLE_ARN }}"
        }
        EOT
        
#    - name: Download ECS task definition from S3
#      run: |
#          aws s3 cp s3://${{ env.BUCKET_NAME }}/task-definition.json .aws/task-definition.json
#          
    - name: Register ECS Task Definition
      run: |
          ECS_TASK_DEFINITION=".aws/task-definition.json"
          aws ecs register-task-definition --cli-input-json file://$ECS_TASK_DEFINITION

    - name: Create the Log Group (/ecs/php-dkr-fargate-family)
      run: |
          LOG_GROUP_EXISTS=$(aws logs describe-log-groups --log-group-name-prefix /ecs/php-dkr-fargate-family --region ${{ env.AWS_REGION }} --query 'logGroups[?logGroupName==`/ecs/php-dkr-fargate-family`].logGroupName' --output text)
          if [ -z "$LOG_GROUP_EXISTS" ]; then
            aws logs create-log-group --log-group-name /ecs/php-dkr-fargate-family --region ${{ env.AWS_REGION }}
          else
            echo "Log group already exists. Skipping creation."
          fi

    - name: Create or Update Fargate Service
      run: |
        SERVICE_EXISTS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query 'services[?status==`ACTIVE`].serviceName' --output text)
        if [ -z "$SERVICE_EXISTS" ]; then
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.TASK_DEF_FAMILY }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration '{
              "awsvpcConfiguration": {
                "subnets": ${{ env.SUBNETS }},
                "assignPublicIp": "ENABLED"
              }
            }'
          echo "Fargate service created."
        else
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.TASK_DEF_FAMILY }} \
            --desired-count 1
          echo "Fargate service updated."
        fi

#    - name: Wait for Service ${{ env.ECS_SERVICE }} to be Running
#      run: |
#        aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }}
#        echo "Service ${{ env.ECS_SERVICE }} running..."
#
#    - name: Get Public IP of the Fargate Service
#      run: |
#        TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --query "taskArns[0]" --output text)
#        ENI_ID=$(aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_ARN --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value" --output text)
#        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query "NetworkInterfaces[0].Association.PublicIp" --output text)
#        echo "Public IP: $PUBLIC_IP"
          
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false
